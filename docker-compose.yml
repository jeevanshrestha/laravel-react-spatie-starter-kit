services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    restart: always
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./storage:/var/www/html/storage
      - ./docker/nginx/ssl:/var/www/html/docker/nginx/ssl
      - ./storage/logs:/var/www/html/storage/logs
    networks:
      - app-network
    depends_on:
      db: 
        condition: service_healthy 
    tty: true
    env_file:
      - .env
    healthcheck:  
      test: ["CMD", "php", "-r", "echo 'ok';"]
      interval: 1m30s
      timeout: 30s
      retries: 3
      start_period: 30s
    command: php-fpm
    

  webserver:
    image: nginx:latest
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    container_name: webserver
    restart: always
    depends_on: 
       app:
          condition: service_healthy  # Ensure app (PHP-FPM) is healthy before starting
       db:
          condition: service_healthy  # You can keep DB health check if needed
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    tty: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 1m30s
      timeout: 30s
      retries: 3
      start_period: 30s

  db:
    image: mysql:8.0
    container_name: db
    restart: always
    env_file:
      - ./docker/mysql/.env.db
    volumes:
      - app_db_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - app-network
    tty: true
    healthcheck:
      test: ["CMD", "mysqladmin", "-u", "root", "-proot", "ping"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  node:
    container_name: node
    image: node:latest
    working_dir: /var/www/html
    restart: always
    volumes:
      - .:/var/www/html
      - ./docker/nginx/ssl:/etc/ssl  # Mount SSL certificates
    ports:
      - "5173:5173"  # Expose Vite dev server port to host machine
      - "5174:5174"  # Expose HTTPS port
    networks:
      - app-network 
    environment:
      HTTPS: "true"  # Enable HTTPS
      SSL_CRT_FILE: "/etc/ssl/localhost.crt"  # Path to SSL certificate
      SSL_KEY_FILE: "/etc/ssl/localhost.key"  # Path to SSL key
    command: npm run dev  

networks:
  app-network:
    driver: bridge

volumes:
  app_db_data:
    driver: local
